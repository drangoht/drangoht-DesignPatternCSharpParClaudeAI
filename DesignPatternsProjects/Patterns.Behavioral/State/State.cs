using System;

namespace Patterns.Behavioral.State
{
    /// <summary>
    /// Context - Classe qui maintient une r√©f√©rence √† un objet State concret
    /// et d√©l√®gue toutes les requ√™tes sp√©cifiques √† l'√©tat √† cet objet
    /// </summary>
    public class AudioPlayer
    {
        // √âtat actuel du lecteur
        private IState _state;
        
        // Propri√©t√©s du contexte qui peuvent √™tre utilis√©es par les √©tats
        public bool IsPlaying { get; set; }
        public bool IsPaused { get; set; }
        public int CurrentTrack { get; set; }
        public int Volume { get; private set; }
        
        // R√©f√©rence vers tous les √©tats possibles
        public readonly IState StoppedState;
        public readonly IState PlayingState;
        public readonly IState PausedState;
        public readonly IState LockedState;
        
        public AudioPlayer()
        {
            // Initialisation des √©tats
            StoppedState = new StoppedState(this);
            PlayingState = new PlayingState(this);
            PausedState = new PausedState(this);
            LockedState = new LockedState(this);
            
            // Initialisation des propri√©t√©s
            CurrentTrack = 1;
            Volume = 50; // 0-100
            
            // √âtat initial
            _state = StoppedState;
            IsPlaying = false;
            IsPaused = false;
        }
        
        // M√©thode pour changer l'√©tat actuel
        public void ChangeState(IState state)
        {
            _state = state;
        }
        
        // M√©thodes qui d√©l√®guent les op√©rations √† l'√©tat actuel
        public void Play()
        {
            _state.Play();
        }
        
        public void Stop()
        {
            _state.Stop();
        }
        
        public void Pause()
        {
            _state.Pause();
        }
        
        public void Lock()
        {
            _state.Lock();
        }
        
        public void Unlock()
        {
            _state.Unlock();
        }
        
        public void NextTrack()
        {
            _state.NextTrack();
        }
        
        public void PreviousTrack()
        {
            _state.PreviousTrack();
        }
        
        public void VolumeUp()
        {
            if (Volume < 100)
            {
                Volume += 10;
                if (Volume > 100) Volume = 100;
                Console.WriteLine($"Volume augment√© √† {Volume}%");
            }
            else
            {
                Console.WriteLine("Volume d√©j√† au maximum");
            }
        }
        
        public void VolumeDown()
        {
            if (Volume > 0)
            {
                Volume -= 10;
                if (Volume < 0) Volume = 0;
                Console.WriteLine($"Volume baiss√© √† {Volume}%");
            }
            else
            {
                Console.WriteLine("Volume d√©j√† au minimum");
            }
        }
        
        // Permet d'obtenir l'√©tat actuel sous forme de cha√Æne pour l'affichage
        public string GetStatus()
        {
            string status = "√âtat inconnu";
            
            if (_state == StoppedState) status = "Arr√™t√©";
            else if (_state == PlayingState) status = "Lecture";
            else if (_state == PausedState) status = "Pause";
            else if (_state == LockedState) status = "Verrouill√©";
            
            return $"Lecteur audio | Piste: {CurrentTrack} | Volume: {Volume}% | √âtat: {status}";
        }
    }
    
    /// <summary>
    /// State - Interface d√©finissant les m√©thodes qui doivent √™tre impl√©ment√©es
    /// par tous les √©tats concrets
    /// </summary>
    public interface IState
    {
        void Play();
        void Stop();
        void Pause();
        void Lock();
        void Unlock();
        void NextTrack();
        void PreviousTrack();
    }
    
    /// <summary>
    /// ConcreteState - Impl√©mente le comportement associ√© √† l'√©tat "Arr√™t√©"
    /// </summary>
    public class StoppedState : IState
    {
        private readonly AudioPlayer _player;
        
        public StoppedState(AudioPlayer player)
        {
            _player = player;
        }
        
        public void Play()
        {
            Console.WriteLine("‚ñ∂Ô∏è D√©marrage de la lecture");
            _player.IsPlaying = true;
            _player.IsPaused = false;
            _player.ChangeState(_player.PlayingState);
        }
        
        public void Stop()
        {
            Console.WriteLine("‚èπÔ∏è D√©j√† √† l'arr√™t");
        }
        
        public void Pause()
        {
            Console.WriteLine("‚è∏Ô∏è Impossible de mettre en pause: d√©j√† √† l'arr√™t");
        }
        
        public void Lock()
        {
            Console.WriteLine("üîí Verrouillage du lecteur");
            _player.ChangeState(_player.LockedState);
        }
        
        public void Unlock()
        {
            Console.WriteLine("üîì Le lecteur n'est pas verrouill√©");
        }
        
        public void NextTrack()
        {
            _player.CurrentTrack++;
            Console.WriteLine($"‚è≠Ô∏è Piste suivante s√©lectionn√©e (piste {_player.CurrentTrack})");
        }
        
        public void PreviousTrack()
        {
            if (_player.CurrentTrack > 1)
            {
                _player.CurrentTrack--;
                Console.WriteLine($"‚èÆÔ∏è Piste pr√©c√©dente s√©lectionn√©e (piste {_player.CurrentTrack})");
            }
            else
            {
                Console.WriteLine("‚èÆÔ∏è Impossible de revenir en arri√®re: premi√®re piste");
            }
        }
    }
    
    /// <summary>
    /// ConcreteState - Impl√©mente le comportement associ√© √† l'√©tat "En lecture"
    /// </summary>
    public class PlayingState : IState
    {
        private readonly AudioPlayer _player;
        
        public PlayingState(AudioPlayer player)
        {
            _player = player;
        }
        
        public void Play()
        {
            Console.WriteLine("‚ñ∂Ô∏è D√©j√† en lecture");
        }
        
        public void Stop()
        {
            Console.WriteLine("‚èπÔ∏è Arr√™t de la lecture");
            _player.IsPlaying = false;
            _player.IsPaused = false;
            _player.ChangeState(_player.StoppedState);
        }
        
        public void Pause()
        {
            Console.WriteLine("‚è∏Ô∏è Mise en pause de la lecture");
            _player.IsPlaying = false;
            _player.IsPaused = true;
            _player.ChangeState(_player.PausedState);
        }
        
        public void Lock()
        {
            Console.WriteLine("üîí Verrouillage du lecteur");
            _player.ChangeState(_player.LockedState);
        }
        
        public void Unlock()
        {
            Console.WriteLine("üîì Le lecteur n'est pas verrouill√©");
        }
        
        public void NextTrack()
        {
            _player.CurrentTrack++;
            Console.WriteLine($"‚è≠Ô∏è Lecture de la piste suivante (piste {_player.CurrentTrack})");
        }
        
        public void PreviousTrack()
        {
            if (_player.CurrentTrack > 1)
            {
                _player.CurrentTrack--;
                Console.WriteLine($"‚èÆÔ∏è Lecture de la piste pr√©c√©dente (piste {_player.CurrentTrack})");
            }
            else
            {
                Console.WriteLine("‚èÆÔ∏è Impossible de revenir en arri√®re: premi√®re piste");
            }
        }
    }
    
    /// <summary>
    /// ConcreteState - Impl√©mente le comportement associ√© √† l'√©tat "En pause"
    /// </summary>
    public class PausedState : IState
    {
        private readonly AudioPlayer _player;
        
        public PausedState(AudioPlayer player)
        {
            _player = player;
        }
        
        public void Play()
        {
            Console.WriteLine("‚ñ∂Ô∏è Reprise de la lecture");
            _player.IsPlaying = true;
            _player.IsPaused = false;
            _player.ChangeState(_player.PlayingState);
        }
        
        public void Stop()
        {
            Console.WriteLine("‚èπÔ∏è Arr√™t de la lecture");
            _player.IsPlaying = false;
            _player.IsPaused = false;
            _player.ChangeState(_player.StoppedState);
        }
        
        public void Pause()
        {
            Console.WriteLine("‚è∏Ô∏è D√©j√† en pause");
        }
        
        public void Lock()
        {
            Console.WriteLine("üîí Verrouillage du lecteur");
            _player.ChangeState(_player.LockedState);
        }
        
        public void Unlock()
        {
            Console.WriteLine("üîì Le lecteur n'est pas verrouill√©");
        }
        
        public void NextTrack()
        {
            _player.CurrentTrack++;
            Console.WriteLine($"‚è≠Ô∏è Piste suivante s√©lectionn√©e (piste {_player.CurrentTrack})");
        }
        
        public void PreviousTrack()
        {
            if (_player.CurrentTrack > 1)
            {
                _player.CurrentTrack--;
                Console.WriteLine($"‚èÆÔ∏è Piste pr√©c√©dente s√©lectionn√©e (piste {_player.CurrentTrack})");
            }
            else
            {
                Console.WriteLine("‚èÆÔ∏è Impossible de revenir en arri√®re: premi√®re piste");
            }
        }
    }
    
    /// <summary>
    /// ConcreteState - Impl√©mente le comportement associ√© √† l'√©tat "Verrouill√©"
    /// </summary>
    public class LockedState : IState
    {
        private readonly AudioPlayer _player;
        private readonly bool _wasPlayingBeforeLock;
        
        public LockedState(AudioPlayer player)
        {
            _player = player;
            _wasPlayingBeforeLock = player.IsPlaying;
        }
        
        public void Play()
        {
            Console.WriteLine("üîí Impossible de d√©marrer la lecture: lecteur verrouill√©");
        }
        
        public void Stop()
        {
            Console.WriteLine("üîí Impossible d'arr√™ter: lecteur verrouill√©");
        }
        
        public void Pause()
        {
            Console.WriteLine("üîí Impossible de mettre en pause: lecteur verrouill√©");
        }
        
        public void Lock()
        {
            Console.WriteLine("üîí Le lecteur est d√©j√† verrouill√©");
        }
        
        public void Unlock()
        {
            Console.WriteLine("üîì D√©verrouillage du lecteur");
            
            // Retour √† l'√©tat pr√©c√©dent
            if (_wasPlayingBeforeLock)
            {
                _player.IsPlaying = true;
                _player.IsPaused = false;
                _player.ChangeState(_player.PlayingState);
            }
            else if (_player.IsPaused)
            {
                _player.IsPlaying = false;
                _player.IsPaused = true;
                _player.ChangeState(_player.PausedState);
            }
            else
            {
                _player.IsPlaying = false;
                _player.IsPaused = false;
                _player.ChangeState(_player.StoppedState);
            }
        }
        
        public void NextTrack()
        {
            Console.WriteLine("üîí Impossible de changer de piste: lecteur verrouill√©");
        }
        
        public void PreviousTrack()
        {
            Console.WriteLine("üîí Impossible de changer de piste: lecteur verrouill√©");
        }
    }
}


