using System;

namespace Patterns.Behavioral.TemplateMethod
{
    /// <summary>
    /// Abstract Class - D√©finit le template method qui contr√¥le le squelette de l'algorithme
    /// </summary>
    public abstract class BeveragePreparation
    {
        // Template Method - d√©finit le squelette de l'algorithme
        public void PrepareBeverage()
        {
            BoilWater();
            Brew();
            PourInCup();
            if (CustomerWantsCondiments())
            {
                AddCondiments();
            }
            Console.WriteLine("Votre boisson est pr√™te !\n");
        }

        // Op√©rations communes √† toutes les boissons
        protected void BoilWater()
        {
            Console.WriteLine("üå°Ô∏è Eau en cours d'√©bullition");
        }

        protected void PourInCup()
        {
            Console.WriteLine("ü•§ Versement dans la tasse");
        }

        // Op√©rations qui doivent √™tre impl√©ment√©es par les sous-classes
        protected abstract void Brew();
        protected abstract void AddCondiments();

        // Hook - peut √™tre surcharg√© par les sous-classes
        protected virtual bool CustomerWantsCondiments()
        {
            return true;
        }
    }

    /// <summary>
    /// Concrete Class - Pr√©pare du caf√©
    /// </summary>
    public class CoffeePreparation : BeveragePreparation
    {
        private readonly bool _wantsCondiments;

        public CoffeePreparation(bool wantsCondiments = true)
        {
            _wantsCondiments = wantsCondiments;
        }

        protected override void Brew()
        {
            Console.WriteLine("‚òï Infusion du caf√©");
        }

        protected override void AddCondiments()
        {
            Console.WriteLine("ü•õ Ajout de lait et de sucre");
        }

        protected override bool CustomerWantsCondiments()
        {
            return _wantsCondiments;
        }
    }

    /// <summary>
    /// Concrete Class - Pr√©pare du th√©
    /// </summary>
    public class TeaPreparation : BeveragePreparation
    {
        private readonly bool _wantsCondiments;

        public TeaPreparation(bool wantsCondiments = true)
        {
            _wantsCondiments = wantsCondiments;
        }

        protected override void Brew()
        {
            Console.WriteLine("ü´ñ Infusion du th√©");
        }

        protected override void AddCondiments()
        {
            Console.WriteLine("üçã Ajout de citron");
        }

        protected override bool CustomerWantsCondiments()
        {
            return _wantsCondiments;
        }
    }
}
